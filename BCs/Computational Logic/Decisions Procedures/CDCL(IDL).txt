CDCL(IDL)


y − z ≤ −5
x − y ≤ −1
(z − x ≤ 1) ∨ (x /≤ u)
y − u ≤ −3

Rewrite
y − z ≤ −5
x − y ≤ −1
(z − x ≤ 1) ∨ (u - x =< -1)
y − u ≤ −3

C0:
1. y − z ≤ −5
2. x − y ≤ −1
3. (z − x ≤ 1) ∨ (u - x =< -1)
4. y − u ≤ −3


Propagate
(y − z ≤ −5[1], x − y ≤ −1[2], y − u ≤ −3[4] | C0 | * )

Decide
(y − z ≤ −5[1], x − y ≤ −1[2], y − u ≤ −3[4], z − x ≤ 1[3] | C0 | * )

Apply IDL to check the consistency of (z − x ≤ 1)
There is one cycle:
z --(-5)--> y --(-1)--> x --(1)--> z
To prove it is constent we have to check if
(-5)+(-1)+(1)>= 0	so it is inconsistent

Following the T-propagate rule we can add the negated clause of z − x ≤ 1, that is 
z - x > 1
x - z < -1
x - z =< -2

1. y − z ≤ −5
2. x − y ≤ −1
3. (z − x ≤ 1) ∨ (u - x =< -1)
4. y − u ≤ −3
5. x - z =< -2

Propagate
(y − z ≤ −5[1], x − y ≤ −1[2], y − u ≤ −3[4], x - z =< -2[5] | C0 [5] | * )

Propagate
(y − z ≤ −5[1], x − y ≤ −1[2], y − u ≤ −3[4], x - z =< -2[5], u - x =< -1[3] | C0 [5] | * )

Check consistency of 	u - x =< -1 	of clause 3 with IDL
There is one cycle:
u --(-3)--> y --(-1)--> x --(-1)--> u
To check consistency we need to check if
(-3)+(-1)+(-1)>= 0		it is inconsistent

so it is UNSAT



